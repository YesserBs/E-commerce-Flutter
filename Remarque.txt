"import 'package:flutter/material.dart';
import 'package:get/get.dart';

void main() {
  runApp(MyApp());
}

class IncNumber extends GetxController {
  var x = 0.obs; // Use ".obs" to make it observable

  void increment() {
    x.value++; // Access the value using ".value"
  }
  void decrement() {
    x.value--; // Access the value using ".value"
  }
}

class MyApp extends StatelessWidget {
  final IncNumber _instance = Get.put(IncNumber());

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      title: 'Get Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Get Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Obx(() => Text(
                'Count: ${_instance.x.value}', // Access the value using ".value"
                style: TextStyle(fontSize: 24),
              )),
              SizedBox(height: 16),

          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () => _instance.increment(),
                child: Text('Increment'),

              ),
              SizedBox(width: 20.0,),
              ElevatedButton(
                onPressed: () => _instance.decrement(),
                child: Text('Decrement'),
              ),
            ],),],
          ),
        ),
      ),
    );
  }
}"



About GetX in this example:
First we create a separate class called IncNumber to handle the state and logic related to the count. While it may seem like a simple case to have a separate class for just a number, this approach becomes useful as your application grows in complexity.
"var x = 0.obs;"
.obs stands for observable, An observable is an object that can be observed for changes, and whenever the value of the observable changes, it notifies its observers to update themselves. In the case of GetX, the obs extension on a variable creates an observable that can be used to track changes to that variable.
In the given example, the Obx widget is used to observe the x observable from the IncNumber. Here's the relevant code snippet from the example:
"Obx(() => Text(
                'Count: ${_instance.x.value}', // Access the value using ".value"
                style: TextStyle(fontSize: 24),
              )
         ),"




